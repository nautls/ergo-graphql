# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdProof {
  digest: String!
  header: Header!
  headerId: String!
  proofBytes: String!
}

type Address {
  address: String!
  balance: AddressBalance!
  boxesCount: Int!
  transactionsCount: Int!
  used: Boolean!
}

type AddressAssetBalance {
  amount: String!
  decimals: Int
  name: String
  tokenId: String!
}

type AddressBalance {
  assets(tokenId: String): [AddressAssetBalance!]!
  nanoErgs: String!
}

type Asset implements IAsset {
  amount: String!
  box: Box!
  boxId: String!
  headerId: String!
  index: Int!
  token: Token!
  tokenId: String!
}

input AssetInput {
  amount: String!
  tokenId: String!
}

type Block {
  blockChainTotalSize: String!
  blockCoins: String!
  blockFee: String!
  blockMiningTime: String!
  blockSize: Int!
  difficulty: String!
  header: Header!
  headerId: String!
  height: Int!
  mainChain: Boolean!
  maxBoxGix: String!
  maxTxGix: String!
  minerAddress: String!
  minerRevenue: String!
  minerReward: String!
  timestamp: String!
  totalCoinsInTxs: String!
  totalCoinsIssued: String!
  totalFees: String!
  totalMinersReward: String!
  totalMiningTime: String!
  totalTxsCount: String!
  txsCount: Int!
  txsSize: Int!
}

type Box implements IBox {
  additionalRegisters: JSONObject!
  address: String!
  assets: [Asset!]!
  beingSpent: Boolean!
  boxId: String!
  creationHeight: Int!
  ergoTree: String!
  ergoTreeTemplateHash: String!
  globalIndex: String!
  headerId: String!
  index: Int!
  mainChain: Boolean!
  settlementHeight: Int!
  spentBy: Input
  transaction: Transaction!
  transactionId: String!
  value: String!
}

type DataInput implements IDataInput {
  box: Box!
  boxId: String!
  headerId: String!
  index: Int!
  mainChain: Boolean!
  transaction: Transaction!
  transactionId: String!
}

type Epochs {
  blockVersion: Int!
  dataInputCost: Int!
  height: Int!
  inputCost: Int!
  maxBlockCost: Int!
  maxBlockSize: Int!
  minValuePerByte: Int!
  outputCost: Int!
  storageFeeFactor: Int!
  tokenAccessCost: Int!
}

type Extension {
  digest: String!
  fields: JSONObject!
  headerId: String!
}

type Header {
  adProof: AdProof!
  adProofsRoot: String!
  blockInfo: Block!
  difficulty: String!
  extension: Extension!
  extensionHash: String!
  headerId: String!
  height: Int!
  mainChain: Boolean!
  nBits: String!
  parentId: String!
  powSolutions: JSONObject!
  stateRoot: String!
  timestamp: String!
  transactionsRoot: String!
  version: Int!
  votes: [Int!]!
}

interface IAsset {
  amount: String!
  boxId: String!
  index: Int!
  tokenId: String!
}

interface IBox {
  additionalRegisters: JSONObject!
  address: String!
  boxId: String!
  creationHeight: Int!
  ergoTree: String!
  ergoTreeTemplateHash: String!
  index: Int!
  transactionId: String!
  value: String!
}

interface IDataInput {
  boxId: String!
  index: Int!
  transactionId: String!
}

interface IInput {
  box: Box
  boxId: String!
  extension: JSONObject!
  index: Int!
  proofBytes: String
  transactionId: String!
}

interface ITransaction {
  size: Int!
  transactionId: String!
}

type Info {
  version: String!
}

type Input implements IInput {
  box: Box
  boxId: String!
  extension: JSONObject!
  headerId: String!
  index: Int!
  mainChain: Boolean!
  proofBytes: String
  transaction: Transaction!
  transactionId: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mempool {
  addresses(addresses: [String!]!): [UnconfirmedAddress!]!
  boxes(address: String, boxId: String, ergoTree: String, ergoTreeTemplateHash: String, skip: Int = 0, take: Int = 50, tokenId: String, transactionId: String): [UnconfirmedBox!]!
  inputs(boxId: String, skip: Int = 0, take: Int = 50, transactionId: String): [UnconfirmedInput!]!
  size: Int!
  transactions(address: String, addresses: [String!], skip: Int = 0, take: Int = 50, transactionId: String, transactionIds: [String!]): [UnconfirmedTransaction!]!
  transactionsCount: Int!
}

type Mutation {
  checkTransaction(signedTransaction: SignedTransaction!): String!
  submitTransaction(signedTransaction: SignedTransaction!): String!
}

type Query {
  addresses(addresses: [String!]!): [Address!]!
  blockHeaders(headerId: String, height: Int, parentId: String, skip: Int = 0, take: Int = 10): [Header!]!
  blocks(headerId: String, height: Int, maxHeight: Int, minHeight: Int, skip: Int = 0, take: Int = 10): [Block!]!
  boxes(address: String, addresses: [String!], boxId: String, boxIds: [String!], ergoTree: String, ergoTreeTemplateHash: String, ergoTrees: [String!], headerId: String, maxHeight: Int, minHeight: Int, registers: Registers, skip: Int = 0, spent: Boolean, take: Int = 50, tokenId: String, transactionId: String): [Box!]!
  dataInputs(boxId: String, headerId: String, skip: Int = 0, take: Int = 50, transactionId: String): [DataInput!]!
  info: Info!
  inputs(boxId: String, headerId: String, skip: Int = 0, take: Int = 50, transactionId: String): [Input!]!
  mempool: Mempool!
  state: State!
  tokens(boxId: String, name: String, skip: Int = 0, take: Int = 50, tokenId: String, tokenIds: [String!]): [Token!]!
  transactions(address: String, addresses: [String!], headerId: String, inclusionHeight: Int, maxHeight: Int, minHeight: Int, skip: Int = 0, take: Int = 50, transactionId: String, transactionIds: [String!]): [Transaction!]!
}

input Registers {
  R4: String
  R5: String
  R6: String
  R7: String
  R8: String
  R9: String
}

input SignedTransaction {
  dataInputs: [TransactionDataInput!]!
  id: String!
  inputs: [TransactionInput!]!
  outputs: [TransactionOutput!]!
  size: Int
}

input SpendingProofInput {
  extension: JSONObject!
  proofBytes: String!
}

type State {
  blockId: String!
  boxGlobalIndex: String!
  difficulty: String!
  height: Int!
  network: String!
  params: Epochs!
  transactionGlobalIndex: String!
}

type Token {
  box: Box!
  boxId: String!
  decimals: Int
  description: String
  emissionAmount: String!
  name: String
  tokenId: String!
  type: String
}

type Transaction implements ITransaction {
  coinbase: Boolean!
  dataInputs: [DataInput!]!
  globalIndex: String!
  headerId: String!
  inclusionHeight: Int!
  index: Int!
  inputs: [Input!]!
  mainChain: Boolean!
  outputs(
    """Only includes outputs owned by `address` and the miner fee output"""
    relevantOnly: Boolean
  ): [Box!]!
  size: Int!
  timestamp: String!
  transactionId: String!
}

input TransactionDataInput {
  boxId: String!
}

input TransactionInput {
  boxId: String!
  spendingProof: SpendingProofInput!
}

input TransactionOutput {
  additionalRegisters: JSONObject!
  assets: [AssetInput!]
  boxId: String
  creationHeight: Int!
  ergoTree: String!
  index: Int
  transactionId: String
  value: String!
}

type UnconfirmedAddress {
  address: String!
  balance: AddressBalance!
}

type UnconfirmedAsset implements IAsset {
  amount: String!
  boxId: String!
  index: Int!
  token: Token!
  tokenId: String!
}

type UnconfirmedBox implements IBox {
  additionalRegisters: JSONObject!
  address: String!
  assets: [UnconfirmedAsset!]!
  boxId: String!
  creationHeight: Int!
  ergoTree: String!
  ergoTreeTemplateHash: String!
  index: Int!
  transaction: UnconfirmedTransaction!
  transactionId: String!
  value: String!
}

type UnconfirmedDataInput implements IDataInput {
  boxId: String!
  index: Int!
  transaction: UnconfirmedTransaction!
  transactionId: String!
}

type UnconfirmedInput implements IInput {
  box: Box
  boxId: String!
  extension: JSONObject!
  index: Int!
  proofBytes: String
  transaction: UnconfirmedTransaction!
  transactionId: String!
}

type UnconfirmedTransaction implements ITransaction {
  dataInputs: [UnconfirmedDataInput!]!
  inputs: [UnconfirmedInput!]!
  outputs: [UnconfirmedBox!]!
  size: Int!
  timestamp: String!
  transactionId: String!
}
